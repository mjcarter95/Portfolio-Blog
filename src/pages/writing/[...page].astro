---
import BaseLayout from "@/layouts/BaseLayout.astro";
import HeroHeader from "@/components/HeroHeader.astro";
import { getCollection } from "astro:content";
import { slugifyTag } from "@/utils/tags";

export async function getStaticPaths({ paginate }) {
  const all = (await getCollection("writing"))
    .filter((p) => !p.data.draft)
    .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
  return paginate(all, { pageSize: 5 });
}

const allPosts = (await getCollection("writing"))
  .filter((p) => !p.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

const { page } = Astro.props;
const posts = page.data;

const counts = new Map<string, { label: string; count: number }>();
for (const p of allPosts) {
  for (const t of p.data.tags ?? []) {
    const s = slugifyTag(t);
    const entry = counts.get(s);
    if (entry) entry.count++;
    else counts.set(s, { label: t, count: 1 });
  }
}
const tagList = [...counts.entries()]
  .map(([slug, v]) => ({ slug, ...v }))
  .sort((a, b) => a.label.localeCompare(b.label));

// Optional: choose a hero image
const heroImage = "/images/spotlight/forest_ground.jpg"; // change as needed
---

<BaseLayout title="Writing — Matthew Carter">
  <HeroHeader
      title="Writing"
      subtitle="Essays, ideas, and explorations — from research to reflection."
    backgroundImage={heroImage}
  >
    <input
      slot="rightContent"
      id="post-search"
      type="search"
      placeholder="Search title, summary, tags…"
      class="w-full sm:w-72 rounded-md border border-gray-300 mb-4 px-4 py-2 text-sm text-black focus:outline-none focus:ring-2 focus:ring-[#996633]"
    />
  </HeroHeader>
  <section class="max-w-4xl mx-auto px-6 py-12">

    <div id="post-list" class="space-y-8">
      {posts.map(({ slug, data }) => {
        const searchText = [data.title, data.summary ?? "", ...(data.tags ?? [])]
          .join(" ")
          .toLowerCase();

        return (
          <article
            class="pb-6 border-b border-gray-200 last:border-0"
            data-search={searchText}
          >
            <h2 class="text-2xl font-semibold mb-2">
              <a href={`/writing/${slug}/`} class="hover:text-[#996633] transition">
                {data.title}
              </a>
            </h2>
            <div class="flex flex-wrap items-center gap-3 text-sm text-gray-500 mb-2">
              <span>
                {data.date.toLocaleDateString("en-GB", {
                  year: "numeric",
                  month: "long",
                  day: "2-digit",
                })}
              </span>
              {data.tags?.length > 0 && (
                <div class="flex gap-2 flex-wrap">
                  {data.tags.slice(0, 3).map((tag) => (
                    <a
                      href={`/tags/${slugifyTag(tag)}/`}
                      class="px-2 py-0.5 bg-gray-100 rounded hover:bg-[#996633] hover:text-white transition"
                    >
                      {tag}
                    </a>
                  ))}
                </div>
              )}
            </div>
            {data.summary && <p class="text-gray-700">{data.summary}</p>}
          </article>
        );
      })}
    </div>

    <p id="no-results" class="hidden text-gray-500 mt-8">
      No posts match your search.
    </p>

    <!-- Pagination -->
    <nav class="mt-12 mb-8 pt-6 border-t border-gray-200 flex items-center justify-center gap-2 text-sm">
      {page.url.first ? (
        <a href={page.url.first} class="px-3 py-1 border rounded bg-white text-gray-700 border-gray-300 hover:bg-gray-100">« First</a>
      ) : (
        <span class="px-3 py-1 border rounded bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed">« First</span>
      )}
      {page.url.prev ? (
        <a href={page.url.prev} class="px-3 py-1 border rounded bg-white text-gray-700 border-gray-300 hover:bg-gray-100">‹ Prev</a>
      ) : (
        <span class="px-3 py-1 border rounded bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed">‹ Prev</span>
      )}

      {Array.from({ length: page.lastPage }).map((_, i) => {
        const n = i + 1;
        const href = i === 0 ? (page.url.first ?? "/writing/") : `/writing/${n}/`;
        const isCurrent = n === page.currentPage;
        return (
          <a
            href={href}
            aria-current={isCurrent ? "page" : undefined}
            class={`px-3 py-1 border rounded ${
              isCurrent
                ? "bg-gray-700 text-white border-gray-700"
                : "bg-white text-gray-700 border-gray-300 hover:bg-gray-100"
            }`}
          >
            {n}
          </a>
        );
      })}

      {page.url.next ? (
        <a href={page.url.next} class="px-3 py-1 border rounded bg-white text-gray-700 border-gray-300 hover:bg-gray-100">Next ›</a>
      ) : (
        <span class="px-3 py-1 border rounded bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed">Next ›</span>
      )}
      {page.url.last ? (
        <a href={page.url.last} class="px-3 py-1 border rounded bg-white text-gray-700 border-gray-300 hover:bg-gray-100">Last »</a>
      ) : (
        <span class="px-3 py-1 border rounded bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed">Last »</span>
      )}
    </nav>

    <hr class="border-gray-300 mb-8" />

    {tagList.length > 0 && (
      <div class="mt-12">
        <div class="flex items-baseline justify-between">
          <h2 class="text-lg font-semibold">Browse by tag</h2>
          <a href="/tags" class="text-sm underline hover:text-[#996633]">
            View all →
          </a>
        </div>
        <div class="mt-3 flex flex-wrap gap-3">
          {tagList.map((t) => (
            <a
              href={`/tags/${t.slug}/`}
              class="px-3 py-1 rounded-full bg-gray-100 hover:bg-[#996633] hover:text-white transition text-sm"
            >
              {t.label} <span class="opacity-70">({t.count})</span>
            </a>
          ))}
        </div>
      </div>
    )}
  </section>

  <script>
    const input = document.getElementById('post-search');
    const list = document.getElementById('post-list');
    const empty = document.getElementById('no-results');

    function filter() {
      const q = (input.value || '').toLowerCase().trim();
      let visible = 0;
      for (const item of list.children) {
        const hay = item.getAttribute('data-search') || '';
        const show = hay.includes(q);
        item.style.display = show ? '' : 'none';
        if (show) visible++;
      }
      empty.classList.toggle('hidden', visible !== 0);
    }
    input.addEventListener('input', filter);
  </script>
</BaseLayout>
