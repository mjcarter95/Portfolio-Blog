---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { slugifyTag } from "@/utils/tags";
import readingTime from "reading-time";

export async function getStaticPaths() {
  const posts = await getCollection("writing");
  return posts.map((p) => ({
    params: { slug: p.slug },
    props: { post: p, allPosts: posts },
  }));
}

const { post, allPosts } = Astro.props;
const { Content } = await post.render();

// Read time (round, min 1)
const rt = readingTime(post.body ?? "");
const readMinutes = Math.max(1, Math.round(rt.minutes));

// Prev/next
const sorted = allPosts
  .filter((p) => !p.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
const i = sorted.findIndex((p) => p.slug === post.slug);
const prev = sorted[i - 1] || null;
const next = sorted[i + 1] || null;

// SEO
const seoTitle = `${post.data.title} — Writing`;
const seoDescription =
  post.data.summary ??
  post.data.description ??
  "Article by Matthew Carter on AI, Bayesian inference, and high-performance computing.";
const seoImage = post.data.cover ?? "/images/seo/default-og.jpg";
const canonical =
  typeof Astro.site === "string"
    ? new URL(`/writing/${post.slug}/`, Astro.site).toString()
    : undefined;
---


<BaseLayout title={seoTitle} description={seoDescription} image={seoImage} canonical={canonical}>
  <section class="max-w-3xl mx-auto px-6 py-12">
    <!-- Header -->
    <header class="mb-6">
      <div class="mb-4">
        <a href="/writing" class="text-sm font-medium underline underline-offset-4 hover:text-[#996633]">
          ← Back to Writing
        </a>
      </div>

      <h1 class="text-4xl font-bold leading-tight text-gray-900 mb-2">
        {post.data.title}
      </h1>

      <div class="flex flex-wrap items-center gap-3 text-sm text-gray-500">
        <time datetime={post.data.date.toISOString()}>
          {post.data.date.toLocaleDateString("en-GB", {
            year: "numeric",
            month: "long",
            day: "2-digit",
          })}
        </time>

        <span aria-hidden="true">·</span>

        <span class="inline-flex items-center gap-1 rounded bg-gray-100 px-2 py-0.5 text-gray-700">
          {readMinutes} min read
        </span>

        {post.data.tags?.length > 0 && (
          <>
            <span aria-hidden="true">·</span>
            <ul class="flex gap-2 flex-wrap">
              {post.data.tags.slice(0, 3).map((tag) => (
                <li>
                  <a
                    href={`/tags/${slugifyTag(tag)}/`}
                    class="px-2 py-0.5 rounded bg-gray-100 text-gray-700 hover:bg-[#996633] hover:text-white transition"
                  >
                    {tag}
                  </a>
                </li>
              ))}
            </ul>
          </>
        )}
      </div>
    </header>

    <!-- Cover image (optional) -->
    {post.data.cover && (
      <figure class="mb-8">
        <img
          src={post.data.cover}
          alt={post.data.coverAlt ?? ""}
          class="w-full rounded-xl shadow-sm"
          loading="lazy"
          decoding="async"
        />
        {post.data.coverCaption && (
          <figcaption class="mt-2 text-sm text-gray-500">
            {post.data.coverCaption}
          </figcaption>
        )}
      </figure>
    )}

    <!-- Content -->
    <article class="prose prose-lg prose-neutral max-w-none">
      <Content />
    </article>

    <!-- Prev / Next -->
    <nav class="mt-12 pt-6 border-t border-gray-200 flex justify-between text-sm">
      {prev ? (
        <a
          href={`/writing/${prev.slug}/`}
          class="hover:underline"
          aria-label={`Previous: ${prev.data.title}`}
        >
          ← {prev.data.title}
        </a>
      ) : (
        <span></span>
      )}
      {next && (
        <a
          href={`/writing/${next.slug}/`}
          class="hover:underline"
          aria-label={`Next: ${next.data.title}`}
        >
          {next.data.title} →
        </a>
      )}
    </nav>
  </section>
</BaseLayout>
